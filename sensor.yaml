# Weather Prediction
- platform: yr
  monitored_conditions:
    - temperature
    - symbol

# NodeMCU sensors
- platform: mqtt
  name: "Livingroom temperature"
  state_topic: "Temp715487"
  unit_of_measurement: "°C"

- platform: mqtt
  name: "Livingroom humidity"
  state_topic: "Humid715487"
  unit_of_measurement: "%"

- platform: mqtt
  name: "Kitchen temperature"
  state_topic: "Temp715644"
  unit_of_measurement: "°C"

- platform: mqtt
  name: "Kitchen humidity"
  state_topic: "Humid715644"
  unit_of_measurement: "%"

- platform: mqtt
  name: "Bedroom temperature"
  state_topic: "Temp715091"
  unit_of_measurement: "°C"

- platform: mqtt
  name: "Bedroom humidity"
  state_topic: "Humid715091"
  unit_of_measurement: "%"

#Xiaomi Flower sensors
- platform: miflora
  mac: !secret miflora_mac_yucca
  name: "Yucca Palm"
  force_update: true
  median: 1
  monitored_conditions:
    - moisture
    - light
    - temperature
    - conductivity
    - battery

- platform: miflora
  mac: !secret miflora_mac_succulent
  name: "Succulent"
  force_update: true
  median: 3
  monitored_conditions:
    - moisture
    - light
    - temperature
    - conductivity
    - battery

- platform: miflora
  mac: !secret miflora_mac_monstera
  name: "Monstera"
  force_update: true
  median: 3
  monitored_conditions:
    - moisture
    - light
    - temperature
    - conductivity
    - battery

- platform: miflora
  mac: !secret miflora_mac_money
  name: "Money Tree"
  force_update: true
  median: 3
  monitored_conditions:
    - moisture
    - light
    - temperature
    - conductivity
    - battery

#System Monitor
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_use_percent
    - type: processor_use
    - type: last_boot
    - type: network_in
      arg: eth0
    - type: network_out
      arg: eth0

#Uptime sensor
- platform: uptime
  name: Home Assistant uptime

#Xiaomi vacuum
- platform: template
  sensors:
    vacuum_status:
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.status }}'
      friendly_name: 'Status'
      icon_template: >-
          {% if is_state_attr('vacuum.xiaomi_vacuum_cleaner' ,'status', 'Charging') %}
            mdi:power-plug
          {% elif is_state_attr('vacuum.xiaomi_vacuum_cleaner' ,'status', 'Returning home') %}
            mdi:home-outline
          {% elif is_state_attr('vacuum.xiaomi_vacuum_cleaner' ,'status', 'Cleaning') %}
            mdi:broom
          {% else %}
            mdi:information-outline
          {% endif %}
- platform: template
  sensors:
    vacuum_fan_speed:
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.fan_speed }}'
      friendly_name: 'Fan speed'
- platform: template
  sensors:
    vacuum_battery_level:
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level }}'
      friendly_name: 'Battery level'
      unit_of_measurement: "%"
      icon_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_icon }}'
- platform: template
  sensors:
    vacuum_cleaned_area:
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaned_area }}'
      friendly_name: 'Cleaned area'
      unit_of_measurement: "m²"
- platform: template
  sensors:
    vacuum_cleaning_time:
      value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_time }}'
      friendly_name: 'Cleaning time'
- platform: sql
  db_url: !secret db_url
  queries:
    - name: HASS DB size
      query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="hass_db" GROUP BY table_schema;'
      column: 'value'
      unit_of_measurement: MB
- platform: template
  sensors:
    current_power_consumption:
      value_template: '{{ states("sensor.fibaro_wall_plug_livingroom_power")|int + states("sensor.fibaro_wall_plug_bedroom_power")|int + states("sensor.fibaro_wall_plug_kitchen_power")|int + states("sensor.fibaro_dimmer_livingroom_power")|int }}'
      friendly_name: 'Current power consumption'
      unit_of_measurement: W
#- platform: template
#  sensors:
#    livingroom_power_yesterday:
#      value_template: >
#        {% if now().hour == 21 and now().minute == 10 %}
#          {{ states("sensor.fibaro_wall_plug_livingroom_energy") | float }}
#        {%- endif %}
#
#- platform: template
#  sensors:
#    livingroom_daily_power:
#      value_template: '{{ states("sensor.fibaro_wall_plug_livingroom_energy")|float - states("sensor.livingroom_power_yesterday")|float }}'
#      friendly_name: 'Current power consumption'
#      unit_of_measurement: kWh
- platform: template
  sensors:
    daily_livingroom_power_consumption:
      value_template: "{{ (states('sensor.fibaro_wall_plug_livingroom_energy')|float - states('input_number.livingroom_energy_at_midnight')|float) | round(1) }}"
      unit_of_measurement: kWh
- platform: template
  sensors:
    daily_bedroom_power_consumption:
      value_template: "{{ (states('sensor.fibaro_wall_plug_bedroom_energy')|float - states('input_number.bedroom_energy_at_midnight')|float) | round(1) }}"
      unit_of_measurement: kWh
- platform: template
  sensors:
    daily_kitchen_power_consumption:
      value_template: "{{ (states('sensor.fibaro_wall_plug_kitchen_energy')|float - states('input_number.kitchen_energy_at_midnight')|float) | round(1) }}"
      unit_of_measurement: kWh
- platform: template
  sensors:
    daily_total_power_consumption:
      value_template: "{{ (states('sensor.daily_livingroom_power_consumption')|float + states('sensor.daily_bedroom_power_consumption')|float + states('sensor.daily_kitchen_power_consumption')|float + states('sensor.daily_livingroom_ceiling_power_consumption')|float) | round(1) }}"
      unit_of_measurement: kWh
- platform: template
  sensors:
    daily_livingroom_ceiling_power_consumption:
      value_template: "{{ (states('sensor.fibaro_dimmer_livingroom_energy')|float - states('input_number.livingroom_ceiling_energy_at_midnight')|float) | round(1) }}"
      unit_of_measurement: kWh
